---
- name: Gather Aruba CX facts and save to files
  hosts: aruba_cx
  gather_facts: false
  collections:
    - arubanetworks.aoscx

  vars:
    facts_out_dir: "./facts"

  pre_tasks:
    - name: Ensure we are using the AOS-CX connection plugin
      ansible.builtin.assert:
        that:
          - ansible_connection == 'arubanetworks.aoscx.aoscx'
          - ansible_network_os == 'arubanetworks.aoscx.aoscx'
        fail_msg: >-
          This playbook expects the AOS-CX connection plugin (not httpapi).

    - name: Create local output directory
      delegate_to: localhost
      run_once: true
      ansible.builtin.file:
        path: "{{ facts_out_dir }}"
        state: directory
        mode: '0755'

  tasks:
    - name: Gather AOS-CX facts (all)
      arubanetworks.aoscx.aoscx_facts:
      register: aoscx

    - name: Set structured facts variable
      ansible.builtin.set_fact:
        cx_facts: "{{ aoscx.ansible_facts | default({}) }}"

    - name: Show short summary
      ansible.builtin.debug:
        msg:
          hostname: "{{ inventory_hostname }}"
          model: "{{ cx_facts.get('ansible_net_model', 'unknown') }}"
          os_version: "{{ cx_facts.get('ansible_net_version', 'unknown') }}"
          serial: "{{ cx_facts.get('ansible_net_serialnum', 'unknown') }}"

    - name: Save facts as JSON (one file per host)
      delegate_to: localhost
      ansible.builtin.copy:
        dest: "{{ facts_out_dir }}/{{ inventory_hostname }}.json"
        content: "{{ cx_facts | to_nice_json }}"
        mode: '0644'

    - name: Save facts as YAML (one file per host)
      delegate_to: localhost
      ansible.builtin.copy:
        dest: "{{ facts_out_dir }}/{{ inventory_hostname }}.yml"
        content: "{{ cx_facts | to_nice_yaml }}"
        mode: '0644'